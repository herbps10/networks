./custom.c:	g->adjacency_matrix = malloc(NETWORK_SIZE * NETWORK_SIZE * sizeof(_Bool));
./custom.c:	g->states = malloc(NETWORK_SIZE * sizeof(state));
./custom.c:	g->counter = malloc(NETWORK_SIZE * sizeof(short));
./custom.c:			g->adjacency_matrix[(i * NETWORK_SIZE) + j] = 0;
./custom.c:		g->states[i] = SUSCEPTIBLE;
./custom.c:		g->counter[i] = 0;
./custom.c:			prev = row - k;
./custom.c:			if(prev < 0) prev = NETWORK_SIZE - K;
./custom.c:			if(next >= NETWORK_SIZE) next = K - 1;
./custom.c:			g->adjacency_matrix[(row * NETWORK_SIZE) + prev] = 1;
./custom.c:			g->adjacency_matrix[(row * NETWORK_SIZE) + next] = 1;
./custom.c:	g->adjacency_matrix[(v1 * NETWORK_SIZE) + v2] = 1;
./custom.c:	g->adjacency_matrix[(v2 * NETWORK_SIZE) + v1] = 1;
./custom.c:	g->adjacency_matrix[(v1 * NETWORK_SIZE) + v2] = 0;
./custom.c:	g->adjacency_matrix[(v2 * NETWORK_SIZE) + v1] = 0;
./custom.c:	return (g->adjacency_matrix[(v1 * NETWORK_SIZE) + v2] == 1 && g->adjacency_matrix[(v2 * NETWORK_SIZE) + v1]);
./custom.c:			if(g->adjacency_matrix[(i * NETWORK_SIZE) + j] == 1)
./custom.c:			printf("%i ", g->adjacency_matrix[(i * NETWORK_SIZE) + j]);
./custom.c:		if(g->states[random_vertex] == SUSCEPTIBLE)
./custom.c:			g->states[random_vertex] = INFECTIOUS;
./custom.c:			n->adjacency_matrix[(i * NETWORK_SIZE) + j] = g->adjacency_matrix[(i * NETWORK_SIZE) + j];
./custom.c:		if(g->states[i] == SUSCEPTIBLE)
./custom.c:		else if(g->states[i] == LATENT)
./custom.c:		else if(g->states[i] == INFECTIOUS)
./custom.c:		else if(g->states[i] == RECOVERED)
./custom.c:		g->counter[i]++;
./custom.c:	free(g->adjacency_matrix);
./custom.c:	free(g->states);
./custom.c:	free(g->counter);
./graph.c:	g->infectious = NULL;
./graph.c:	g->latent = NULL;
./graph.c:	vertex_list_destroy(g->infectious);
./graph.c:		g->vertices[i] = malloc(sizeof(vertex));
./graph.c:		*g->vertices[i] = vertex_create();
./graph.c:			before = i - k; // The vertex to connect to on the left of the current vertex (smaller index)
./graph.c:			if(after >= NETWORK_SIZE) after -= NETWORK_SIZE; // If we've gone past the end of the array wrap around to the other end
./graph.c:			vertex_add_edge(g->vertices[i], g->vertices[before]);
./graph.c:			vertex_add_edge(g->vertices[i], g->vertices[after]);
./graph.c: * Performs Watts-Strogatz style rewiring of the graph
./graph.c:		iterator = g->vertices[i]->first_neighbor;
./graph.c:				} while(random_vertex != i && vertex_edge_exists(g->vertices[i], g->vertices[random_vertex]) == FALSE);
./graph.c:				vertex_delete_edge(g->vertices[i], iterator->vertex);
./graph.c:				vertex_add_edge(g->vertices[i], g->vertices[random_vertex]);
./graph.c:			iterator = iterator->next;
./graph.c:		if(g->vertices[r]->state != INFECTIOUS)
./graph.c:			vertex_set_state(g->vertices[r], INFECTIOUS, 0);
./graph.c:			g->infectious = vertex_list_append(g->infectious, g->vertices[r]);
./graph.c:	vertex_list_node *infectious_iterator = g->infectious, *latent_iterator = g->latent, *new_latent, *temp;
./graph.c:		printf("Iterator: %p, prev: %p, next: %p\n", infectious_iterator, infectious_iterator->prev, infectious_iterator->next);
./graph.c:		if(day - infectious_iterator->vertex->state_day > DAYS_INFECTIOUS)
./graph.c:			vertex_set_state(infectious_iterator->vertex, RECOVERED, day);
./graph.c:			if(infectious_iterator->prev == NULL)
./graph.c:				g->infectious = infectious_iterator->next;
./graph.c:				g->infectious->prev = NULL;
./graph.c:				if(infectious_iterator->next != NULL)
./graph.c:					infectious_iterator->next->prev = NULL;
./graph.c:				infectious_iterator = infectious_iterator->next;
./graph.c:				infectious_iterator->prev->next = infectious_iterator->next;
./graph.c:				infectious_iterator = infectious_iterator->next;
./graph.c:			new_latent = vertex_infect_neighbors(infectious_iterator->vertex, day);
./graph.c:				// g->latent is still null, even after the merge
./graph.c:				g->latent = vertex_list_merge(g->latent, new_latent);
./graph.c:			infectious_iterator = infectious_iterator->next;
./graph.c:			vertex_set_state(latent_iterator->vertex, INFECTIOUS, day);
./graph.c:			vertex_list_append(g->infectious, latent_iterator->vertex);
./graph.c:			latent_iterator = latent_iterator->next;
./graph.c:		g->latent = NULL;
./graph.c:		switch(g->vertices[i]->state)
./graph.c:	if(g->infectious == NULL) return FALSE;
./networks.c:				 // The function: T = 1 - (1 - R0/k) * (1/d)
./networks.c:				T = 1 - (1 - ((R0/num_neighbors) / (double)DAYS_INFECTIOUS));
./networks.c:						// Generates float from 0.0-1.0 inclusive
./networks.c:					//sprintf(&graph_file[0], "graph-data/graph%i-k-%i-p-%f.graphml", day, K, p);
./stats.c:	sprintf(&f[0], "data/stats-%i.csv", run_index);
./vertex.c:	v->state_day = 0;
./vertex.c:	v->state = SUSCEPTIBLE;
./vertex.c:	v->first_neighbor = NULL;
./vertex.c:	v->degree = 0; // Doesn't have any neighbors so degree is 0
./vertex.c:	vertex_list_destroy(v->first_neighbor);
./vertex.c: * Adds a link from v --> neighbor and from neighbor --> v
./vertex.c: * one directional edge from v --> vertex.
./vertex.c:	node->vertex = neighbor;
./vertex.c:	node->next = v->first_neighbor;
./vertex.c:	node->prev = NULL;
./vertex.c:	if(v->first_neighbor != NULL)
./vertex.c:		v->first_neighbor->prev = node;
./vertex.c:	v->first_neighbor = node;
./vertex.c:	v->degree++;
./vertex.c:	vertex_list_node *iterator = v->first_neighbor;
./vertex.c:		if(iterator->vertex == neighbor)
./vertex.c:			if(iterator->prev == NULL)
./vertex.c:				v->first_neighbor = iterator->next;
./vertex.c:			else if(iterator->next == NULL)
./vertex.c:				iterator->prev->next = NULL;
./vertex.c:				iterator->prev->next = iterator->next;	
./vertex.c:		iterator = iterator->next;
./vertex.c:	v->degree--; // Since we're deleting an edge, the degree goes down by one
./vertex.c:	return vertex_list_contains(haystack->first_neighbor, needle);
./vertex.c:	v->state = s;
./vertex.c:	v->state_day = day;
./vertex.c:	if(v->state == INFECTIOUS && day - v->state_day > 0)
./vertex.c:		iterator = v->first_neighbor;
./vertex.c:			if(iterator->vertex->state == RECOVERED)
./vertex.c:				if(day - iterator->vertex->state_day > DAYS_RECOVERED)
./vertex.c:					vertex_set_state(iterator->vertex, SUSCEPTIBLE, day);
./vertex.c:			if(iterator->vertex->state == SUSCEPTIBLE)
./vertex.c:				if(vertex_spread_infection(v, iterator->vertex, day) == TRUE)
./vertex.c:					new_latent = vertex_list_append(new_latent, iterator->vertex);
./vertex.c:			iterator = iterator->next;
./vertex.c:	T = 1 - (1 - (((double)R0/(double)source->degree) / (double)DAYS_INFECTIOUS));
./vertex_list.c:		iterator = iterator->next;
./vertex_list.c:		if(iterator->vertex == v)
./vertex_list.c:		iterator = iterator->next;
./vertex_list.c:	node->vertex = v;
./vertex_list.c:	node->next = list;
./vertex_list.c:	node->prev = NULL;
./vertex_list.c:		list->prev = node;
./vertex_list.c:		while(iterator->next != NULL)
./vertex_list.c:			iterator = iterator->next;
./vertex_list.c:		iterator->next = list2;
